console.log('[AUTH ENV]', {
  id: !!process.env.GOOGLE_CLIENT_ID,
  secret: !!process.env.GOOGLE_CLIENT_SECRET,
  url: process.env.NEXTAUTH_URL,
  secretSet: !!process.env.NEXTAUTH_SECRET,
});
import { NextAuthOptions } from "next-auth";
import Google from "next-auth/providers/google";
import { PrismaAdapter } from "@auth/prisma-adapter";
import { prisma } from "../server/db/prisma";
import { Role } from "@prisma/client";

export const authOptions: NextAuthOptions = {
  debug: true,
  logger: {
    error(code, metadata) {
      console.error('[NextAuth error]', code, metadata)
    },
    warn(code) {
      console.warn('[NextAuth warn]', code)
    },
    debug(code, metadata) {
      console.log('[NextAuth debug]', code, metadata)
    },
  },
  // Remove PrismaAdapter temporarily to avoid DB conflicts with JWT
  // adapter: PrismaAdapter(prisma) as any,
  providers: [
    Google({
      clientId: process.env.GOOGLE_CLIENT_ID!,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
      authorization: {
        params: {
          prompt: "consent",
          access_type: "offline",
          response_type: "code"
        }
      }
    }),
  ],
  session: { strategy: "jwt" },
  secret: process.env.NEXTAUTH_SECRET,
  pages: {
    signIn: "/login",
    error: "/login",
  },
  callbacks: {
    async redirect({ url, baseUrl }) {
      console.log('[NextAuth redirect]', { url, baseUrl });
      // Allow relative callbackUrls and same-origin absolute URLs
      if (url.startsWith("/")) return `${baseUrl}${url}`;
      try {
        const urlObj = new URL(url);
        if (urlObj.origin === baseUrl) return url;
      } catch {}
      // Fallback to home to avoid loops
      return baseUrl;
    },
    async signIn({ user, account, profile }) {
      console.log('[NextAuth signIn]', { user: user.email, account: account?.provider });
      // For now, just allow sign-in without DB operations
      return true;
    },
    async jwt({ token, user, account }) {
      if (user) {
        console.log('[NextAuth JWT]', { user: user.email, account: account?.provider });
        // Set default role without DB lookup for now
        const adminEmails = (process.env.ADMIN_EMAILS || '').split(',').map(email => email.trim()).filter(Boolean);
        token.role = adminEmails.includes(user.email!) ? ("ADMIN" as Role) : ("CLIENT" as Role);
        token.userId = user.id;
      }
      return token;
    },
    async session({ session, token }) {
      if (token && session.user) {
        session.user.role = token.role as Role;
        session.user.id = token.userId as string;
      }
      return session;
    },
  },
};

// Helper function to check if user has required role
export function hasRole(userRole: Role, requiredRoles: Role[]): boolean {
  return requiredRoles.includes(userRole);
}

// Helper function to check if user is admin
export function isAdmin(userRole: Role): boolean {
  return userRole === ("ADMIN" as any);
}

// Helper function to check if user is staff or admin  
export function isStaffOrAdmin(userRole: Role): boolean {
  return userRole === ("ADMIN" as any) || userRole === ("STAFF" as any);
}